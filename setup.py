#!/usr/bin/env python3
"""
Script de setup para o BodyFlow Backend
Este script ajuda a configurar o ambiente e testar a aplica√ß√£o
"""

import os
import sys
import subprocess
import asyncio
from pathlib import Path

def check_python_version():
    """Verifica se a vers√£o do Python √© compat√≠vel"""
    if sys.version_info < (3, 8):
        print("‚ùå Python 3.8+ √© necess√°rio")
        return False
    print(f"‚úÖ Python {sys.version_info.major}.{sys.version_info.minor} detectado")
    return True

def install_dependencies():
    """Instala as depend√™ncias do projeto"""
    print("\nüì¶ Instalando depend√™ncias...")
    try:
        subprocess.check_call([sys.executable, "-m", "pip", "install", "-r", "requirements.txt"])
        print("‚úÖ Depend√™ncias instaladas com sucesso!")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Erro ao instalar depend√™ncias: {e}")
        return False

def create_env_file():
    """Cria arquivo .env se n√£o existir"""
    env_file = Path(".env")
    if not env_file.exists():
        print("\nüìù Criando arquivo .env...")
        env_content = """# Supabase Configuration
SUPABASE_URL=https://seu-projeto.supabase.co
SUPABASE_KEY=sua_chave_anonima_aqui

# Twilio Configuration
TWILIO_AUTH_TOKEN=seu_auth_token_twilio

# Application Configuration
DEBUG=True
PORT=8000
"""
        with open(".env", "w") as f:
            f.write(env_content)
        print("‚úÖ Arquivo .env criado!")
        print("‚ö†Ô∏è  Configure as vari√°veis de ambiente no arquivo .env")
    else:
        print("‚úÖ Arquivo .env j√° existe")

def show_supabase_sql():
    """Mostra o SQL necess√°rio para criar a tabela no Supabase"""
    print("\nüóÑÔ∏è SQL para Supabase:")
    print("=" * 50)
    sql = """
CREATE TABLE IF NOT EXISTS messages (
    id SERIAL PRIMARY KEY,
    phone VARCHAR(20) NOT NULL,
    body TEXT NOT NULL,
    direction VARCHAR(10) NOT NULL CHECK (direction IN ('inbound', 'outbound')),
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

CREATE INDEX IF NOT EXISTS idx_messages_phone ON messages(phone);
CREATE INDEX IF NOT EXISTS idx_messages_created_at ON messages(created_at);
"""
    print(sql)
    print("=" * 50)
    print("üí° Execute este SQL no Supabase SQL Editor")

def show_next_steps():
    """Mostra os pr√≥ximos passos"""
    print("\nüöÄ Pr√≥ximos Passos:")
    print("=" * 30)
    print("1. Configure as vari√°veis no arquivo .env")
    print("2. Execute o SQL no Supabase")
    print("3. Inicie o servidor:")
    print("   python app/main.py")
    print("4. Teste a aplica√ß√£o:")
    print("   python test_example.py")
    print("5. Configure o webhook no Twilio:")
    print("   https://seu-dominio.com/whatsapp/")

def main():
    """Fun√ß√£o principal do setup"""
    print("ü§ñ BodyFlow Backend - Setup")
    print("=" * 40)
    
    # Verifica Python
    if not check_python_version():
        return
    
    # Instala depend√™ncias
    if not install_dependencies():
        return
    
    # Cria arquivo .env
    create_env_file()
    
    # Mostra SQL do Supabase
    show_supabase_sql()
    
    # Mostra pr√≥ximos passos
    show_next_steps()
    
    print("\n‚úÖ Setup conclu√≠do!")
    print("üéâ Seu BodyFlow Backend est√° pronto para uso!")

if __name__ == "__main__":
    main()
