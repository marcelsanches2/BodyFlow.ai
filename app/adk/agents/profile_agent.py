"""
Profile Agent para ADK - Gerenciamento completo de perfil do usu√°rio
"""

import asyncio
import os
import time
from typing import Dict, Any, Optional, List
from datetime import datetime, date
from app.adk.simple_adk import Node
from app.tools.memory_tool import MemoryTool
from app.tools.observability_tool import ObservabilityTool
from app.services.llm_service import llm_service

class ProfileAgentNode(Node):
    """Agente respons√°vel pelo gerenciamento completo do perfil do usu√°rio"""
    
    def __init__(self):
        super().__init__(
            name="profile_agent",
            description="Gerencia perfil do usu√°rio, onboarding e atualiza√ß√µes de dados"
        )
        self.memory_tool = MemoryTool()
        self.observability_tool = ObservabilityTool()
        
        # Estados do onboarding
        self.onboarding_steps = [
            "welcome",
            "age",
            "height", 
            "weight",
            "goal",
            "training_level",
            "restrictions",
            "completion"
        ]
        
        # Campos do perfil com valida√ß√µes
        self.profile_fields = {
            "age": {
                "type": "integer",
                "required": True,
                "validation": lambda x: 13 <= x <= 100,
                "error_msg": "Idade deve estar entre 13 e 100 anos"
            },
            "height_cm": {
                "type": "decimal",
                "required": True,
                "validation": lambda x: 100 <= x <= 250,
                "error_msg": "Altura deve estar entre 100 e 250 cm"
            },
            "current_weight_kg": {
                "type": "decimal",
                "required": True,
                "validation": lambda x: 30 <= x <= 300,
                "error_msg": "Peso deve estar entre 30 e 300 kg"
            },
            "goal": {
                "type": "choice",
                "required": True,
                "options": ["emagrecimento", "hipertrofia", "condicionamento", "manutencao"],
                "validation": lambda x: x in ["emagrecimento", "hipertrofia", "condicionamento", "manutencao"],
                "error_msg": "Objetivo deve ser: emagrecimento, hipertrofia, condicionamento ou manutencao"
            },
            "training_level": {
                "type": "choice",
                "required": True,
                "options": ["iniciante", "intermediario", "avancado"],
                "validation": lambda x: x in ["iniciante", "intermediario", "avancado"],
                "error_msg": "N√≠vel deve ser: iniciante, intermediario ou avancado"
            },
            "restrictions": {
                "type": "jsonb",
                "required": False,
                "validation": lambda x: isinstance(x, dict),
                "error_msg": "Restri√ß√µes devem ser um objeto JSON v√°lido"
            }
        }
    
    async def process(self, input_data: Dict[str, Any]) -> Dict[str, Any]:
        """
        Processa mensagem no contexto do gerenciamento de perfil
        """
        start_time = time.time()
        
        try:
            user_id = input_data.get("user_id", "")
            content = input_data.get("content", "")
            context = input_data.get("context", {})
            force_welcome = input_data.get("force_welcome", False)
            update_intent = input_data.get("update_intent", None)
            
            # Verifica se onboarding est√° completo na tabela customers
            from app.services.memory import MemoryManager
            memory_manager = MemoryManager()
            customer_result = memory_manager.supabase.table("customers").select("onboarding_completed").eq("id", user_id).execute()
            onboarding_completed = customer_result.data[0].get("onboarding_completed", False) if customer_result.data else False
            
            # SEPARA√á√ÉO COMPLETA: Onboarding vs Atualiza√ß√£o
            if onboarding_completed:
                # FLUXO DE ATUALIZA√á√ÉO DE PERFIL - APENAS para usu√°rios com onboarding completo
                return await self._handle_profile_update_flow(user_id, content, update_intent)
            else:
                # FLUXO DE ONBOARDING - APENAS para usu√°rios sem onboarding completo
                return await self._handle_onboarding_flow(user_id, content, context, force_welcome)
            
        except Exception as e:
            execution_time = (time.time() - start_time) * 1000
            return {
                "success": False,
                "response": "Erro no processo de cadastro. Tente novamente.",
                "agent_name": "profile_agent",
                "metadata": {
                    "error": str(e)[:100],
                    "execution_time_ms": execution_time
                }
            }
    
    async def _handle_onboarding_flow(self, user_id: str, content: str, context: Dict[str, Any], force_welcome: bool) -> Dict[str, Any]:
        """
        FLUXO DE ONBOARDING - Apenas para usu√°rios que n√£o completaram o onboarding
        """
        try:
            # Se for welcome for√ßado, mostra mensagem de boas-vindas
            if force_welcome:
                return await self._handle_welcome_step(user_id, content)
            
            # Processa onboarding passo a passo
            result = await self._process_onboarding_flow(user_id, content)
            
            # Se onboarding foi completado, sugere pr√≥ximo agente
            if result.get("onboarding_completed"):
                result["handoff"] = await self._suggest_next_agent(user_id, context)
            
            return {
                "success": True,
                "response": result.get("response", ""),
                "agent_name": "profile_agent",
                "handoff": result.get("handoff"),
                "metadata": {
                    "current_step": result.get("current_step"),
                    "onboarding_completed": result.get("onboarding_completed", False),
                    "profile_updated": result.get("profile_updated", False)
                }
            }
            
        except Exception as e:
            return {
                "success": False,
                "response": "Erro no processo de cadastro. Tente novamente.",
                "agent_name": "profile_agent",
                "metadata": {
                    "error": str(e)[:100]
                }
            }
    
    async def _handle_profile_update_flow(self, user_id: str, content: str, update_intent: str) -> Dict[str, Any]:
        """
        FLUXO DE ATUALIZA√á√ÉO DE PERFIL - Apenas para usu√°rios que completaram o onboarding
        """
        try:
            # Busca perfil atual do usu√°rio na tabela user_profile
            profile_data = await self._get_user_profile_from_table(user_id)
            
            # Se √© uma solicita√ß√£o de atualiza√ß√£o espec√≠fica
            if update_intent:
                return await self._handle_specific_update(user_id, content, update_intent, profile_data)
            
            # Detecta se o usu√°rio quer atualizar algo espec√≠fico
            detected_intent = await self._detect_update_intent(content)
            if detected_intent:
                return await self._handle_specific_update(user_id, content, detected_intent, profile_data)
            
            # Se n√£o detectou inten√ß√£o espec√≠fica, mostra op√ß√µes de atualiza√ß√£o
            return await self._handle_profile_update_request(user_id, content, profile_data)
            
        except Exception as e:
            return {
                "success": False,
                "response": "Erro na atualiza√ß√£o de perfil. Tente novamente.",
                "agent_name": "profile_agent",
                "metadata": {
                    "error": str(e)[:100]
                }
            }
    
    async def _handle_profile_update(self, user_id: str, content: str, context: Dict[str, Any], update_intent: str) -> Dict[str, Any]:
        """
        Lida com atualiza√ß√µes espec√≠ficas do perfil
        """
        try:
            print(f"üîÑ OnboardingAgent: Tratando atualiza√ß√£o de '{update_intent}'")
            
            # Trata atualiza√ß√£o geral de perfil
            if update_intent == "profile":
                return await self._show_profile_and_options(user_id, context)
            
            # Extrai o novo valor usando os m√©todos espec√≠ficos
            new_value = None
            if update_intent == "goal":
                new_value = await self._extract_goal(content)
            elif update_intent == "age":
                new_value = await self._extract_age(content)
            elif update_intent == "weight":
                new_value = await self._extract_weight(content)
            elif update_intent == "height":
                new_value = await self._extract_height(content)
            elif update_intent == "training_level":
                new_value = await self._extract_training_level(content)
            elif update_intent == "restrictions":
                new_value = await self._extract_restrictions(content)
            
            if new_value is not None:
                # Atualiza o perfil
                long_term = context.get("long_term", {})
                current_profile = long_term.get("profile", {})
                updated_profile = {**current_profile, update_intent: new_value}
                
                # Salva no banco
                await self.memory_tool.update_long_term_profile(user_id, updated_profile)
                
                # Confirma atualiza√ß√£o
                field_names = {
                    "goal": "objetivo",
                    "age": "idade", 
                    "weight": "peso",
                    "height": "altura",
                    "training_level": "n√≠vel de treino",
                    "restrictions": "restri√ß√µes"
                }
                
                field_name = field_names.get(update_intent, update_intent)
                
                return {
                    "response": f"‚úÖ **{field_name.title()} atualizado para: {new_value}**\n\nComo posso ajudar voc√™ hoje?",
                    "profile_updated": True
                }
            else:
                # Quando n√£o consegue extrair valor, pede informa√ß√£o espec√≠fica
                return await self._ask_for_specific_field_value(update_intent)
                
        except Exception as e:
            print(f"‚ùå Erro na atualiza√ß√£o de perfil: {e}")
            return {
                "response": "Ocorreu um erro ao atualizar seus dados. Tente novamente."
            }
    
    async def _show_profile_and_options(self, user_id: str, context: Dict[str, Any]) -> Dict[str, Any]:
        """
        Mostra o perfil atual e op√ß√µes de atualiza√ß√£o
        """
        try:
            long_term = context.get("long_term", {})
            current_profile = long_term.get("profile", {})
            
            # Mostra o perfil atual
            profile_info = []
            
            if current_profile.get('age'):
                profile_info.append(f"‚Ä¢ **Idade:** {current_profile['age']} anos")
            if current_profile.get('weight'):
                profile_info.append(f"‚Ä¢ **Peso:** {current_profile['weight']} kg")
            if current_profile.get('height'):
                profile_info.append(f"‚Ä¢ **Altura:** {current_profile['height']} cm")
            if current_profile.get('goal'):
                profile_info.append(f"‚Ä¢ **Objetivo:** {current_profile['goal']}")
            if current_profile.get('training_level'):
                profile_info.append(f"‚Ä¢ **N√≠vel de treino:** {current_profile['training_level']}")
            if current_profile.get('restrictions'):
                profile_info.append(f"‚Ä¢ **Restri√ß√µes:** {current_profile['restrictions']}")
            
            profile_text = "\n".join(profile_info) if profile_info else "Nenhuma informa√ß√£o encontrada"
            
            return {
                "response": f"""üìã **Seu Perfil Atual**

{profile_text}

üîÑ **Para atualizar alguma informa√ß√£o, me diga qual campo voc√™ quer alterar:**

‚Ä¢ **Idade:** "tenho 25 anos" ou "idade 30"
‚Ä¢ **Peso:** "peso 75 kg" ou "agora peso 80"
‚Ä¢ **Altura:** "altura 175 cm" ou "tenho 1,80"
‚Ä¢ **Objetivo:** "quero perder peso" ou "objetivo ganhar massa"
‚Ä¢ **N√≠vel:** "sou iniciante" ou "n√≠vel intermedi√°rio"
‚Ä¢ **Restri√ß√µes:** "n√£o como carne" ou "sem lactose"

Ou voc√™ pode dizer "atualizar [campo espec√≠fico]" como "atualizar peso"."""
            }
            
        except Exception as e:
            return {
                "response": "Ocorreu um erro ao mostrar seu perfil. Tente novamente."
            }
    
    async def _ask_for_specific_field_value(self, field: str) -> Dict[str, Any]:
        """
        Pede valor espec√≠fico para um campo
        """
        field_messages = {
            "weight": """üìè **Atualizar Peso**

Para atualizar seu peso, me diga qual √© seu peso atual.""",
            
            "age": """üéÇ **Atualizar Idade**

Para atualizar sua idade, me diga quantos anos voc√™ tem.""",
            
            "height": """üìê **Atualizar Altura**

Para atualizar sua altura, me diga qual √© sua altura.""",
            
            "goal": """üéØ **Atualizar Objetivo**

Para atualizar seu objetivo, me diga qual √© seu novo objetivo.""",
            
            "training_level": """üèãÔ∏è **Atualizar N√≠vel de Treino**

Para atualizar seu n√≠vel de treino, me diga qual √© seu n√≠vel atual.""",
            
            "restrictions": """üö´ **Atualizar Restri√ß√µes**

Para atualizar suas restri√ß√µes alimentares, me diga quais s√£o."""
        }
        
        return {
            "response": field_messages.get(field, f"Hmm, n√£o consegui entender sua {field}. Pode ser mais espec√≠fico?")
        }
    
    async def _detect_intent_to_change(self, content: str, current_profile: Dict[str, Any]) -> Optional[str]:
        """Detecta se o usu√°rio quer alterar uma informa√ß√£o espec√≠fica"""
        try:
            prompt = f"""
Voc√™ √© um assistente inteligente que entende quando usu√°rios querem atualizar informa√ß√µes de forma natural.

MENSAGEM: "{content}"

PERFIL ATUAL:
- Idade: {current_profile.get('age', 'n√£o informado')}
- Peso: {current_profile.get('weight', 'n√£o informado')} kg
- Altura: {current_profile.get('height', 'n√£o informado')} cm
- Objetivo: {current_profile.get('goal', 'n√£o informado')}
- N√≠vel de treino: {current_profile.get('training_level', 'n√£o informado')}
- Restri√ß√µes: {current_profile.get('restrictions', 'n√£o informado')}

ENTENDA A INTEN√á√ÉO REAL:
O usu√°rio quer alterar alguma informa√ß√£o espec√≠fica? Seja inteligente e contextual:

‚Ä¢ Se mencionar dados espec√≠ficos ‚Üí retorne o campo correspondente
‚Ä¢ Se n√£o mencionar nada espec√≠fico ‚Üí retorne "null"
‚Ä¢ Se for conversa geral ‚Üí retorne "null"

EXEMPLOS DE INTERPRETA√á√ÉO NATURAL:
- "quero ganhar massa" ‚Üí "goal" (mudan√ßa de objetivo)
- "tenho 25 anos" ‚Üí "age" (informa√ß√£o de idade)
- "peso 80 kg" ‚Üí "weight" (informa√ß√£o de peso)
- "sou iniciante" ‚Üí "training_level" (n√≠vel de experi√™ncia)
- "n√£o como carne" ‚Üí "restrictions" (restri√ß√£o alimentar)
- "oi" ‚Üí "null" (sauda√ß√£o)
- "n√£o sei" ‚Üí "null" (incerteza)

Seja inteligente: entenda o contexto e a inten√ß√£o real por tr√°s das palavras.

Resposta (apenas o campo ou "null"):
"""
            
            response = await llm_service.call_with_fallback(
                messages=[{"role": "user", "content": prompt}],
                max_tokens=20,
                temperature=0.1
            )
            
            result = response.strip().lower()
            valid_fields = ["age", "weight", "height", "goal", "training_level", "restrictions"]
            
            if result in valid_fields:
                return result
            return None
            
        except Exception:
            return None
    
    async def _get_current_onboarding_state(self, user_id: str) -> Dict[str, Any]:
        """Recupera estado atual do onboarding"""
        try:
            profile = await self.memory_tool.get_long_term_profile(user_id)
            
            # Determina passo atual baseado nos dados coletados
            if not profile:
                return {"step": "welcome", "data": {}}
            elif "age" not in profile:
                return {"step": "age", "data": profile}
            elif "weight" not in profile:
                return {"step": "weight", "data": profile}
            elif "height" not in profile:
                return {"step": "height", "data": profile}
            elif "goal" not in profile:
                return {"step": "goal", "data": profile}
            elif "training_level" not in profile:
                return {"step": "training_level", "data": profile}
            elif "restrictions" not in profile:
                return {"step": "restrictions", "data": profile}
            else:
                return {"step": "completion", "data": profile}
                
        except Exception:
            return {"step": "welcome", "data": {}}
    
    async def _process_onboarding_step(self, user_id: str, content: str, current_state: Dict[str, Any], context: Dict[str, Any]) -> Dict[str, Any]:
        """Processa passo espec√≠fico do onboarding"""
        
        step = current_state.get("step", "welcome")
        existing_data = current_state.get("data", {})
        
        if step == "welcome":
            return await self._handle_welcome_step(user_id, content, existing_data)
        elif step == "age":
            return await self._handle_age_step(user_id, content, existing_data)
        elif step == "weight":
            return await self._handle_weight_step(user_id, content, existing_data)
        elif step == "height":
            return await self._handle_height_step(user_id, content, existing_data)
        elif step == "goal":
            return await self._handle_goal_step(user_id, content, existing_data)
        elif step == "training_level":
            return await self._handle_training_level_step(user_id, content, existing_data)
        elif step == "restrictions":
            return await self._handle_restrictions_step(user_id, content, existing_data)
        elif step == "completion":
            return await self._handle_completion_step(user_id, content, existing_data)
        else:
            return {
                "response": "Erro no processo de cadastro. Vamos recome√ßar.",
                "current_step": "welcome",
                "profile_updated": False
            }
    
    async def _handle_welcome_step_with_bodyflow_greeting(self, user_id: str, content: str, existing_data: Dict[str, Any]) -> Dict[str, Any]:
        """Lida com passo de boas-vindas com mensagem especial do BodyFlow.ai"""
        
        # Usu√°rio j√° foi validado pelo servi√ßo de valida√ß√£o, pode come√ßar onboarding
        return await self._handle_welcome_step(user_id, content, existing_data)
    
    async def _check_user_exists_in_database(self, user_id: str) -> bool:
        """Verifica se o usu√°rio existe no banco de dados"""
        try:
            from app.services.memory import memory_manager
            user = await memory_manager.get_user_by_phone(user_id)
            return user is not None
        except Exception:
            return False
    
    async def _handle_welcome_step(self, user_id: str, content: str, existing_data: Dict[str, Any]) -> Dict[str, Any]:
        """Lida com passo de boas-vindas"""
        
        # Se j√° tem dados salvos, mostra mensagem de continuidade
        if existing_data:
            continuation_message = f"""
üëã **Bem-vindo de volta ao BodyFlow!**

Vejo que voc√™ j√° come√ßou a criar seu perfil personalizado. Vamos continuar de onde paramos!

üìä **Dados j√° coletados:**
{self._format_existing_data(existing_data)}

Vamos continuar com as pr√≥ximas informa√ß√µes:
"""
            
            # Determina pr√≥ximo passo baseado nos dados existentes
            if "age" not in existing_data:
                next_step = "age"
                next_question = "**Qual sua idade?**"
            elif "weight" not in existing_data:
                next_step = "weight"
                next_question = "**Qual seu peso atual?**"
            elif "height" not in existing_data:
                next_step = "height"
                next_question = "**Qual sua altura?**"
            elif "goal" not in existing_data:
                next_step = "goal"
                next_question = "**Qual seu objetivo principal com fitness e sa√∫de?**"
            elif "training_level" not in existing_data:
                next_step = "training_level"
                next_question = "**Como voc√™ descreveria seu n√≠vel atual de atividade f√≠sica?**"
            elif "restrictions" not in existing_data:
                next_step = "restrictions"
                next_question = "**Tem alguma restri√ß√£o alimentar ou alergia que devo considerar?**"
            else:
                next_step = "completion"
                next_question = "Perfeito! Vamos finalizar seu perfil."
            
            return {
                "response": continuation_message + next_question,
                "current_step": next_step,
                "profile_updated": False
            }
        else:
            # Primeira vez - mensagem de boas-vindas completa
            welcome_message = """
üëã **Bem-vindo ao BodyFlow!**

Vou te ajudar a criar seu perfil personalizado para treinos e dietas.

Vamos come√ßar com algumas informa√ß√µes b√°sicas:

**Qual sua idade?**

üì∏ **Dica:** Voc√™ tamb√©m pode enviar fotos de:
‚Ä¢ üçΩÔ∏è **Pratos de comida** ‚Üí C√°lculo autom√°tico de calorias e nutrientes
‚Ä¢ üìä **Bioimped√¢ncia** ‚Üí An√°lise completa da composi√ß√£o corporal
"""
            
            return {
                "response": welcome_message,
                "current_step": "age",
                "profile_updated": False
            }
    
    def _format_existing_data(self, data: Dict[str, Any]) -> str:
        """Formata dados existentes para exibi√ß√£o"""
        formatted = []
        
        if "age" in data:
            formatted.append(f"‚Ä¢ **Idade:** {data['age']} anos")
        if "weight" in data:
            formatted.append(f"‚Ä¢ **Peso:** {data['weight']} kg")
        if "height" in data:
            formatted.append(f"‚Ä¢ **Altura:** {data['height']} cm")
        if "goal" in data:
            formatted.append(f"‚Ä¢ **Objetivo:** {data['goal']}")
        if "training_level" in data:
            formatted.append(f"‚Ä¢ **N√≠vel de treino:** {data['training_level']}")
        if "restrictions" in data:
            formatted.append(f"‚Ä¢ **Restri√ß√µes:** {data['restrictions']}")
        
        return "\n".join(formatted) if formatted else "Nenhum dado coletado ainda."
    
    async def _handle_age_step(self, user_id: str, content: str, existing_data: Dict[str, Any]) -> Dict[str, Any]:
        """Lida com coleta de idade"""
        
        # Extrai idade da mensagem usando LLM
        age = await self._extract_age(content)
        
        if age and 13 <= age <= 100:
            profile_data = {**existing_data, "age": age}
            
            next_message = f"""
‚úÖ Idade registrada: {age} anos

Agora preciso do seu **peso**:

**Qual seu peso atual?**
"""
            
            return {
                "response": next_message,
                "current_step": "weight",
                "profile_updated": True,
                "profile_data": profile_data
            }
        else:
            return {
                "response": "N√£o consegui entender sua idade. Pode me dizer quantos anos voc√™ tem?",
                "current_step": "age",
                "profile_updated": False
            }
    
    async def _handle_weight_step(self, user_id: str, content: str, existing_data: Dict[str, Any]) -> Dict[str, Any]:
        """Lida com coleta de peso"""
        
        # Extrai peso da mensagem usando LLM
        weight = await self._extract_weight(content)
        
        if weight and 30 <= weight <= 200:
            profile_data = {**existing_data, "weight": weight}
            
            next_message = f"""
‚úÖ Peso registrado: {weight} kg

Agora preciso da sua **altura**:

**Qual sua altura?**
"""
            
            return {
                "response": next_message,
                "current_step": "height",
                "profile_updated": True,
                "profile_data": profile_data
            }
        else:
            return {
                "response": "N√£o consegui entender seu peso. Pode me dizer quanto voc√™ pesa?",
                "current_step": "weight",
                "profile_updated": False
            }
    
    async def _handle_height_step(self, user_id: str, content: str, existing_data: Dict[str, Any]) -> Dict[str, Any]:
        """Lida com coleta de altura"""
        
        # Extrai altura da mensagem usando LLM
        height = await self._extract_height(content)
        
        if height and 100 <= height <= 250:
            profile_data = {**existing_data, "height": height}
            
            next_message = f"""
‚úÖ Altura registrada: {height} cm

Agora me conte: **Qual seu principal objetivo?**

üèÉ‚Äç‚ôÇÔ∏è Perder peso
üí™ Ganhar massa muscular  
üèÉ‚Äç‚ôÄÔ∏è Melhorar condicionamento f√≠sico
‚öñÔ∏è Manter peso atual
üìä Reduzir percentual de gordura
"""
            
            return {
                "response": next_message,
                "current_step": "goal",
                "profile_updated": True,
                "profile_data": profile_data
            }
        else:
            return {
                "response": "N√£o consegui entender sua altura. Pode me dizer qual sua altura?",
                "current_step": "height",
                "profile_updated": False
            }
    
    async def _handle_weight_height_step(self, user_id: str, content: str, existing_data: Dict[str, Any]) -> Dict[str, Any]:
        """Lida com coleta de peso e altura"""
        
        # Extrai peso e altura usando LLM
        measurements = await self._extract_weight_height(content)
        
        profile_data = {**existing_data}
        
        if measurements.get("weight"):
            profile_data["weight"] = measurements["weight"]
        if measurements.get("height"):
            profile_data["height"] = measurements["height"]
        
        # Verifica se ambos foram coletados
        if profile_data.get("weight") and profile_data.get("height"):
            next_message = f"""
‚úÖ Dados registrados:
- Peso: {profile_data['weight']} kg
- Altura: {profile_data['height']} cm

Agora me conte: **Qual seu principal objetivo?**

üèÉ‚Äç‚ôÇÔ∏è Perder peso
üí™ Ganhar massa muscular  
üèÉ‚Äç‚ôÄÔ∏è Melhorar condicionamento f√≠sico
‚öñÔ∏è Manter peso atual
üìä Reduzir percentual de gordura
"""
            
            return {
                "response": next_message,
                "current_step": "goal",
                "profile_updated": True,
                "profile_data": profile_data
            }
        else:
            missing = []
            if not profile_data.get("weight"):
                missing.append("peso")
            if not profile_data.get("height"):
                missing.append("altura")
            
            return {
                "response": f"Ops, n√£o consegui entender. Pode me dizer seu {', '.join(missing)}?",
                "current_step": "weight_height",
                "profile_updated": True,
                "profile_data": profile_data
            }
    
    async def _handle_goal_step(self, user_id: str, content: str, existing_data: Dict[str, Any]) -> Dict[str, Any]:
        """Lida com coleta de objetivo"""
        
        goal = await self._extract_goal(content)
        
        if goal:
            profile_data = {**existing_data, "goal": goal}
            
            next_message = f"""
‚úÖ Objetivo registrado: {goal}

Agora preciso saber seu **n√≠vel de treino atual**:

üü¢ **Iniciante** - Pouco ou nenhum exerc√≠cio
üü° **Intermedi√°rio** - Exerc√≠cio regular h√° alguns meses
üî¥ **Avan√ßado** - Treino intenso h√° mais de 1 ano

Qual melhor descreve voc√™?
"""
            
            return {
                "response": next_message,
                "current_step": "training_level",
                "profile_updated": True,
                "profile_data": profile_data
            }
        else:
            return {
                "response": "Por favor, escolha um dos objetivos listados ou descreva seu objetivo.",
                "current_step": "goal",
                "profile_updated": False
            }
    
    async def _handle_training_level_step(self, user_id: str, content: str, existing_data: Dict[str, Any]) -> Dict[str, Any]:
        """Lida com coleta de n√≠vel de treino"""
        
        training_level = await self._extract_training_level(content)
        
        if training_level:
            profile_data = {**existing_data, "training_level": training_level}
            
            next_message = f"""
‚úÖ N√≠vel de treino registrado: {training_level}

Por √∫ltimo, tem alguma **restri√ß√£o ou limita√ß√£o**?

üö´ Les√µes ou dores
üö´ Alergias alimentares
üö´ Restri√ß√µes m√©dicas
üö´ Prefer√™ncias alimentares
‚úÖ Nenhuma restri√ß√£o

Descreva suas limita√ß√µes ou digite "nenhuma".
"""
            
            return {
                "response": next_message,
                "current_step": "restrictions",
                "profile_updated": True,
                "profile_data": profile_data
            }
        else:
            return {
                "response": "Por favor, escolha seu n√≠vel de treino atual.",
                "current_step": "training_level",
                "profile_updated": False
            }
    
    async def _handle_restrictions_step(self, user_id: str, content: str, existing_data: Dict[str, Any]) -> Dict[str, Any]:
        """Lida com coleta de restri√ß√µes"""
        
        restrictions = await self._extract_restrictions(content)
        
        profile_data = {**existing_data, "restrictions": restrictions}
        
        return {
            "response": await self._generate_completion_message(profile_data),
            "current_step": "completion",
            "profile_updated": True,
            "profile_data": profile_data,
            "onboarding_completed": True
        }
    
    async def _handle_completion_step(self, user_id: str, content: str, existing_data: Dict[str, Any]) -> Dict[str, Any]:
        """Lida com passo de conclus√£o"""
        
        return {
            "response": "Seu perfil j√° est√° completo! Como posso ajudar voc√™ hoje?",
            "current_step": "completion",
            "profile_updated": False,
            "onboarding_completed": True
        }
    
    async def _extract_age(self, content: str) -> Optional[int]:
        """Extrai idade da mensagem usando LLM"""
        try:
            prompt = f"""
Voc√™ √© um assistente inteligente especializado em interpretar informa√ß√µes pessoais de forma contextual e natural.

MENSAGEM: "{content}"

AN√ÅLISE INTELIGENTE:
Identifique se o usu√°rio est√° fornecendo sua idade. Seja contextualmente inteligente:

‚Ä¢ Analise o contexto completo da mensagem
‚Ä¢ Procure por n√∫meros que fa√ßam sentido como idade (13-100 anos)
‚Ä¢ Entenda varia√ß√µes naturais de linguagem: diretas, com contexto, informais
‚Ä¢ Distinga entre idade e outras medidas corporais (peso, altura, etc.)
‚Ä¢ Considere o tom e inten√ß√£o da mensagem
‚Ä¢ Se n√£o h√° idade clara ou √© amb√≠guo, retorne "null"

INTERPRETA√á√ÉO CONTEXTUAL:
Seja inteligente na interpreta√ß√£o. Entenda a inten√ß√£o real por tr√°s das palavras, considerando:
- Contexto da conversa
- Padr√µes naturais de linguagem
- Diferen√ßas entre medidas corporais
- Inten√ß√£o comunicativa do usu√°rio

Resposta (apenas n√∫mero ou "null"):
"""
            
            response = await llm_service.call_with_fallback(
                messages=[{"role": "user", "content": prompt}],
                max_tokens=10,
                temperature=0.1
            )
            
            result = response.strip()
            if result.lower() != "null" and result.isdigit():
                age = int(result)
                if 13 <= age <= 100:
                    return age
            return None
            
        except Exception:
            return None
    
    async def _extract_weight(self, content: str) -> Optional[int]:
        """Extrai peso da mensagem usando LLM"""
        try:
            prompt = f"""
Voc√™ √© um assistente inteligente especializado em interpretar informa√ß√µes corporais de forma contextual e natural.

MENSAGEM: "{content}"

AN√ÅLISE INTELIGENTE:
Identifique se o usu√°rio est√° fornecendo seu peso. Seja contextualmente inteligente:

‚Ä¢ Analise o contexto completo da mensagem
‚Ä¢ Procure por n√∫meros que fa√ßam sentido como peso (30-200 kg)
‚Ä¢ Entenda varia√ß√µes naturais de linguagem: diretas, com contexto, informais
‚Ä¢ Distinga entre peso e outras medidas corporais (idade, altura, etc.)
‚Ä¢ Considere o tom e inten√ß√£o da mensagem
‚Ä¢ Se n√£o h√° peso claro ou √© amb√≠guo, retorne "null"

INTERPRETA√á√ÉO CONTEXTUAL:
Seja inteligente na interpreta√ß√£o. Entenda a inten√ß√£o real por tr√°s das palavras, considerando:
- Contexto da conversa
- Padr√µes naturais de linguagem
- Diferen√ßas entre medidas corporais
- Inten√ß√£o comunicativa do usu√°rio

Resposta (apenas n√∫mero ou "null"):
"""
            
            response = await llm_service.call_with_fallback(
                messages=[{"role": "user", "content": prompt}],
                max_tokens=10,
                temperature=0.1
            )
            
            result = response.strip()
            if result.lower() != "null" and result.isdigit():
                weight = int(result)
                if 30 <= weight <= 200:
                    return weight
            return None
        except Exception:
            return None
    
    async def _extract_height(self, content: str) -> Optional[int]:
        """Extrai altura da mensagem usando LLM"""
        try:
            prompt = f"""
Voc√™ √© um assistente inteligente especializado em interpretar informa√ß√µes corporais de forma contextual e natural.

MENSAGEM: "{content}"

AN√ÅLISE INTELIGENTE:
Identifique se o usu√°rio est√° fornecendo sua altura. Seja contextualmente inteligente:

‚Ä¢ Analise o contexto completo da mensagem
‚Ä¢ Procure por n√∫meros que fa√ßam sentido como altura (100-250 cm)
‚Ä¢ Entenda varia√ß√µes naturais de linguagem: diretas, com contexto, informais
‚Ä¢ Distinga entre altura e outras medidas corporais (idade, peso, etc.)
‚Ä¢ Considere o tom e inten√ß√£o da mensagem
‚Ä¢ Se n√£o h√° altura clara ou √© amb√≠guo, retorne "null"

INTERPRETA√á√ÉO CONTEXTUAL:
Seja inteligente na interpreta√ß√£o. Entenda a inten√ß√£o real por tr√°s das palavras, considerando:
- Contexto da conversa
- Padr√µes naturais de linguagem
- Diferen√ßas entre medidas corporais
- Inten√ß√£o comunicativa do usu√°rio

Resposta (apenas n√∫mero ou "null"):
"""
            
            response = await llm_service.call_with_fallback(
                messages=[{"role": "user", "content": prompt}],
                max_tokens=10,
                temperature=0.1
            )
            
            result = response.strip()
            if result.lower() != "null" and result.isdigit():
                height = int(result)
                if 100 <= height <= 250:
                    return height
            return None
        except Exception:
            return None
    
    async def _extract_weight_height(self, content: str) -> Dict[str, Any]:
        """Extrai peso e altura da mensagem"""
        try:
            prompt = f"""
Extraia peso e altura da seguinte mensagem. Retorne apenas JSON com "weight" e "height" em n√∫meros.

Mensagem: "{content}"

Resposta (JSON apenas):
"""
            
            response = await llm_service.call_with_fallback(
                messages=[{"role": "user", "content": prompt}],
                max_tokens=50,
                temperature=0.1
            )
            
            import json
            result = response.strip()
            if "{" in result and "}" in result:
                json_start = result.find("{")
                json_end = result.rfind("}") + 1
                json_str = result[json_start:json_end]
                return json.loads(json_str)
            return {}
            
        except Exception:
            return {}
    
    async def _extract_goal(self, content: str) -> Optional[str]:
        """Extrai objetivo da mensagem usando LLM"""
        try:
            prompt = f"""
Voc√™ √© um assistente inteligente especializado em interpretar objetivos de fitness de forma contextual e natural.

MENSAGEM: "{content}"

AN√ÅLISE INTELIGENTE:
Identifique o objetivo real do usu√°rio com fitness e sa√∫de. Seja contextualmente inteligente:

‚Ä¢ Analise o contexto completo da mensagem
‚Ä¢ Entenda varia√ß√µes naturais de linguagem e sin√¥nimos
‚Ä¢ Considere o tom e inten√ß√£o da mensagem
‚Ä¢ Se n√£o h√° objetivo claro ou √© amb√≠guo, retorne "null"

OBJETIVOS DISPON√çVEIS:
‚Ä¢ "perder peso" - emagrecer, queimar gordura, perder quilos, ficar mais magro
‚Ä¢ "ganhar massa" - hipertrofia, ficar mais forte, ganhar m√∫sculos, massa muscular
‚Ä¢ "condicionamento" - resist√™ncia, cardio, condicionamento f√≠sico, endurance
‚Ä¢ "manter peso" - estabilizar, manter o peso atual, n√£o mudar
‚Ä¢ "reduzir gordura" - definir m√∫sculos, secar, reduzir percentual de gordura

INTERPRETA√á√ÉO CONTEXTUAL:
Seja inteligente na interpreta√ß√£o. Entenda a inten√ß√£o real por tr√°s das palavras, considerando:
- Contexto da conversa
- Padr√µes naturais de linguagem
- Sin√¥nimos e varia√ß√µes de express√£o
- Inten√ß√£o comunicativa do usu√°rio

Resposta (apenas o objetivo ou "null"):
"""
            
            response = await llm_service.call_with_fallback(
                messages=[{"role": "user", "content": prompt}],
                max_tokens=20,
                temperature=0.1
            )
            
            result = response.strip().lower()
            valid_goals = ["perder peso", "ganhar massa", "condicionamento", "manter peso", "reduzir gordura"]
            
            if result in valid_goals:
                return result
            return None
            
        except Exception:
            return None
    
    async def _extract_training_level(self, content: str) -> Optional[str]:
        """Extrai n√≠vel de treino da mensagem usando LLM"""
        try:
            prompt = f"""
Voc√™ √© um assistente inteligente especializado em interpretar n√≠veis de experi√™ncia em fitness de forma contextual e natural.

MENSAGEM: "{content}"

AN√ÅLISE INTELIGENTE:
Identifique o n√≠vel real de experi√™ncia do usu√°rio com treino e atividade f√≠sica. Seja contextualmente inteligente:

‚Ä¢ Analise o contexto completo da mensagem
‚Ä¢ Entenda varia√ß√µes naturais de linguagem e sin√¥nimos
‚Ä¢ Considere o tom e inten√ß√£o da mensagem
‚Ä¢ Se n√£o h√° n√≠vel claro ou √© amb√≠guo, retorne "null"

N√çVEIS DISPON√çVEIS:
‚Ä¢ "iniciante" - nunca treinou, come√ßando agora, pouca experi√™ncia (at√© 6 meses)
‚Ä¢ "intermedi√°rio" - j√° treina h√° algum tempo, experi√™ncia moderada (6 meses a 2 anos)
‚Ä¢ "avan√ßado" - treina h√° muito tempo, muita experi√™ncia (mais de 2 anos)

INTERPRETA√á√ÉO CONTEXTUAL:
Seja inteligente na interpreta√ß√£o. Entenda a inten√ß√£o real por tr√°s das palavras, considerando:
- Contexto da conversa
- Padr√µes naturais de linguagem
- Sin√¥nimos e varia√ß√µes de express√£o
- Inten√ß√£o comunicativa do usu√°rio

Resposta (apenas o n√≠vel ou "null"):
"""
            
            response = await llm_service.call_with_fallback(
                messages=[{"role": "user", "content": prompt}],
                max_tokens=20,
                temperature=0.1
            )
            
            result = response.strip().lower()
            valid_levels = ["iniciante", "intermedi√°rio", "intermediario", "avan√ßado", "avancado"]
            
            if result in valid_levels:
                # Normaliza para formato padr√£o
                if result in ["intermedi√°rio", "intermediario"]:
                    return "intermedi√°rio"
                elif result in ["avan√ßado", "avancado"]:
                    return "avan√ßado"
                return result
            return None
            
        except Exception:
            return None
    
    async def _extract_restrictions(self, content: str) -> Optional[str]:
        """Extrai restri√ß√µes da mensagem usando LLM"""
        try:
            prompt = f"""
Voc√™ √© um assistente inteligente especializado em interpretar restri√ß√µes alimentares e de sa√∫de de forma contextual e natural.

MENSAGEM: "{content}"

AN√ÅLISE INTELIGENTE:
Identifique se o usu√°rio est√° fornecendo informa√ß√µes sobre restri√ß√µes alimentares ou de sa√∫de. Seja contextualmente inteligente:

‚Ä¢ Analise o contexto completo da mensagem
‚Ä¢ Entenda varia√ß√µes naturais de linguagem e sin√¥nimos
‚Ä¢ Considere o tom e inten√ß√£o da mensagem
‚Ä¢ Se n√£o h√° restri√ß√µes claras ou √© amb√≠guo, retorne "null"

INTERPRETA√á√ÉO CONTEXTUAL:
Seja inteligente na interpreta√ß√£o. Entenda a inten√ß√£o real por tr√°s das palavras, considerando:
- Contexto da conversa
- Padr√µes naturais de linguagem
- Sin√¥nimos e varia√ß√µes de express√£o
- Inten√ß√£o comunicativa do usu√°rio

Resposta (apenas a restri√ß√£o, "nenhuma" ou "null"):
"""
            
            response = await llm_service.call_with_fallback(
                messages=[{"role": "user", "content": prompt}],
                max_tokens=30,
                temperature=0.1
            )
            
            result = response.strip().lower()
            
            if result == "null":
                return None
            elif result == "nenhuma":
                return "nenhuma"
            else:
                return result
                
        except Exception:
            return None
    
    async def _generate_completion_message(self, profile_data: Dict[str, Any]) -> str:
        """Gera mensagem de conclus√£o do onboarding"""
        
        return f"""
üéâ **Perfil criado com sucesso!**

üìã **Seus dados:**
- Idade: {profile_data.get('age', 'N/A')} anos
- Peso: {profile_data.get('weight', 'N/A')} kg  
- Altura: {profile_data.get('height', 'N/A')} cm
- Objetivo: {profile_data.get('goal', 'N/A')}
- N√≠vel: {profile_data.get('training_level', 'N/A')}
- Restri√ß√µes: {profile_data.get('restrictions', 'N/A')}

Agora posso te ajudar com:
üèÉ‚Äç‚ôÇÔ∏è **Treino sob medida** ‚Üí Sugest√µes de exerc√≠cios, divis√£o de treinos e como melhorar performance
ü•ó **Alimenta√ß√£o ajustada** ‚Üí Card√°pios, ideias de refei√ß√µes e ajustes na dieta para seus objetivos  
üìä **An√°lise corporal** ‚Üí Feedback sobre evolu√ß√£o, composi√ß√£o e pontos que podemos melhorar
üçΩÔ∏è **Receitas fitness** ‚Üí Pratos r√°pidos, saud√°veis e f√°ceis de incluir na rotina

üí™ **Escolha uma op√ß√£o ou me diga direto seu objetivo que eu preparo algo pra voc√™!**
"""
    
    async def _get_user_profile_from_table(self, user_id: str) -> Dict[str, Any]:
        """Busca perfil do usu√°rio na tabela user_profile"""
        try:
            from app.services.memory import MemoryManager
            memory_manager = MemoryManager()
            result = memory_manager.supabase.table("user_profile").select("*").eq("user_id", user_id).execute()
            if result.data:
                return result.data[0]
            return {}
        except Exception as e:
            print(f"‚ùå Erro ao buscar perfil na tabela user_profile: {e}")
            return {}
    
    async def _update_user_profile(self, user_id: str, profile_data: Dict[str, Any]) -> bool:
        """Atualiza perfil do usu√°rio na tabela user_profile"""
        try:
            from app.services.memory import MemoryManager
            memory_manager = MemoryManager()
            
            # Verifica se j√° existe registro
            existing = memory_manager.supabase.table("user_profile").select("*").eq("user_id", user_id).execute()
            
            if existing.data:
                # Atualiza registro existente
                result = memory_manager.supabase.table("user_profile").update({
                    **profile_data,
                    "updated_at": "NOW()"
                }).eq("user_id", user_id).execute()
            else:
                # Cria novo registro
                result = memory_manager.supabase.table("user_profile").insert({
                    "user_id": user_id,
                    **profile_data
                }).execute()
            
            return len(result.data) > 0
        except Exception as e:
            print(f"‚ùå Erro ao atualizar perfil na tabela user_profile: {e}")
            return False
    
    async def _complete_onboarding(self, user_id: str) -> None:
        """Marca onboarding como completo"""
        try:
            # user_id j√° √© o customer_id (UUID), atualiza diretamente
            from app.services.memory import MemoryManager
            memory_manager = MemoryManager()
            result = memory_manager.supabase.table("customers").update({
                "onboarding_completed": True
            }).eq("id", user_id).execute()
            
            print(f"‚úÖ Onboarding completado para customer_id {user_id}: {len(result.data)} registro(s) atualizado(s)")
            
        except Exception as e:
            print(f"‚ùå Erro ao completar onboarding: {e}")
    
    def _extract_height_value(self, content: str) -> float:
        """Extrai altura em cm de v√°rias formas de entrada"""
        import re
        
        content = content.lower().strip()
        
        # Padr√µes para diferentes formas de entrada
        patterns = [
            # 1 metro e 80
            r'(\d+)\s*metro\s*e\s*(\d+)',
            # 1,80m, 1.80m
            r'(\d+)[,.](\d+)\s*m',
            # 1m80
            r'(\d+)m(\d+)',
            # 180cm, 180 cm
            r'(\d+)\s*cm',
            # 1,80, 1.80 (assume metros se < 3)
            r'^(\d+)[,.](\d+)$',
            # 180 (assume cm se >= 100)
            r'^(\d+)$'
        ]
        
        for pattern in patterns:
            match = re.search(pattern, content)
            if match:
                groups = match.groups()
                
                if len(groups) == 2 and groups[1]:  # 1 metro e 80 ou 1,80m
                    meters = int(groups[0])
                    cm = int(groups[1])
                    if cm < 100:  # 1,80 -> 180cm
                        return meters * 100 + cm
                    else:  # 1 metro e 80 -> 180cm
                        return meters * 100 + cm
                elif len(groups) == 1:  # 180 ou 180cm
                    value = int(groups[0])
                    if value >= 100:  # Assume cm
                        return float(value)
                    else:  # Assume metros
                        return float(value) * 100
        
        return None
    
    def _extract_weight_value(self, content: str) -> float:
        """Extrai peso em kg de v√°rias formas de entrada"""
        import re
        
        content = content.lower().strip()
        
        # Padr√µes para diferentes formas de entrada
        patterns = [
            # 75kg, 75 kg, 75kgs
            r'(\d+(?:\.\d+)?)\s*kg?s?',
            # 75 (assume kg)
            r'^(\d+(?:\.\d+)?)$'
        ]
        
        for pattern in patterns:
            match = re.search(pattern, content)
            if match:
                return float(match.group(1))
        
        return None
    
    async def _extract_goal_value(self, content: str) -> str:
        """Extrai objetivo usando LLM para interpretar diferentes express√µes"""
        try:
            prompt = f"""
Analise a seguinte express√£o do usu√°rio sobre seu objetivo fitness e classifique em uma das categorias abaixo:

EXPRESS√ÉO DO USU√ÅRIO: "{content}"

CATEGORIAS DISPON√çVEIS:
1. "emagrecimento" - para quem quer perder peso, queimar gordura, ficar mais magro, secar, definir o corpo
2. "hipertrofia" - para quem quer ganhar massa muscular, ficar maromba, crescer, ficar forte, malhar
3. "condicionamento" - para quem quer melhorar condicionamento f√≠sico, sa√∫de, bem-estar, resist√™ncia
4. "manutencao" - para quem quer manter o peso atual, equilibrar, n√£o mudar muito

EXEMPLOS DE INTERPRETA√á√ÉO:
- "ganho de massa" ‚Üí hipertrofia
- "ficar maromba" ‚Üí hipertrofia  
- "ficar fininha" ‚Üí emagrecimento
- "perder barriga" ‚Üí emagrecimento
- "melhorar f√¥lego" ‚Üí condicionamento
- "manter peso" ‚Üí manutencao

Responda APENAS com uma das 4 categorias (emagrecimento, hipertrofia, condicionamento, manutencao) ou "null" se n√£o conseguir classificar.
"""

            response = await llm_service.call_with_fallback(
                messages=[{
                    "role": "user",
                    "content": prompt
                }],
                max_tokens=50,
                temperature=0.1
            )
            
            result = response.strip().lower()
            
            # Valida se o resultado √© uma categoria v√°lida
            valid_goals = ["emagrecimento", "hipertrofia", "condicionamento", "manutencao"]
            if result in valid_goals:
                return result
            else:
                return None
                
        except Exception as e:
            print(f"‚ùå Erro ao extrair objetivo com LLM: {e}")
            return None
    
    def _extract_training_level_value(self, content: str) -> str:
        """Extrai n√≠vel de treino de v√°rias formas de entrada"""
        content = content.lower().strip()
        
        # Mapeamento de sin√¥nimos para n√≠veis
        level_mapping = {
            "iniciante": ["iniciante", "come√ßando", "novato", "primeira vez", "nunca treinei", "sou novo"],
            "intermediario": ["intermedi√°rio", "intermediario", "j√° treino", "tenho experi√™ncia", "meio termo"],
            "avancado": ["avan√ßado", "avancado", "experiente", "treino h√° anos", "sou forte"]
        }
        
        for level, synonyms in level_mapping.items():
            for synonym in synonyms:
                if synonym in content:
                    return level
        
        return None
    
    # =====================================================
    # M√âTODOS PARA GERENCIAMENTO DE PERFIL
    # =====================================================
    
    def _is_profile_complete(self, profile_data: Dict[str, Any]) -> bool:
        """Verifica se o perfil est√° completo"""
        required_fields = ["age", "height_cm", "current_weight_kg", "goal", "training_level"]
        return all(profile_data.get(field) for field in required_fields)
    
    async def _handle_specific_update(self, user_id: str, content: str, update_intent: str, profile_data: Dict[str, Any]) -> Dict[str, Any]:
        """Lida com atualiza√ß√µes espec√≠ficas de campos do perfil"""
        try:
            # Extrai o valor do campo
            field_value = await self._extract_field_value(content, update_intent)
            
            if not field_value:
                return {
                    "response": f"N√£o consegui entender o valor para {update_intent}. Tente novamente.",
                    "current_step": "update_requested"
                }
            
            # Valida o valor
            validation_result = self._validate_field_value(update_intent, field_value)
            if not validation_result["valid"]:
                return {
                    "response": f"‚ùå {validation_result['error']}",
                    "current_step": "update_requested"
                }
            
            # Atualiza o perfil
            updated_profile = {**profile_data, update_intent: field_value}
            success = await self._update_user_profile(user_id, updated_profile)
            
            if success:
                return {
                    "response": f"‚úÖ {update_intent.replace('_', ' ').title()} atualizado para: **{field_value}**",
                    "profile_updated": True,
                    "profile_data": updated_profile,
                    "current_step": "update_completed"
                }
            else:
                return {
                    "response": f"‚ùå Erro ao atualizar {update_intent}. Tente novamente.",
                    "current_step": "update_requested"
                }
                
        except Exception as e:
            return {
                "response": f"‚ùå Erro ao processar atualiza√ß√£o: {str(e)[:100]}",
                "current_step": "update_requested"
            }
    
    async def _handle_profile_update_request(self, user_id: str, content: str, profile_data: Dict[str, Any]) -> Dict[str, Any]:
        """Lida com solicita√ß√µes de atualiza√ß√£o de perfil de usu√°rios j√° cadastrados"""
        try:
            # Detecta qual campo o usu√°rio quer atualizar
            update_intent = await self._detect_update_intent(content)
            
            if update_intent:
                return await self._handle_specific_update(user_id, content, update_intent, profile_data)
            
            # Se n√£o detectou inten√ß√£o espec√≠fica, mostra op√ß√µes
            return {
                "response": f"""
üë§ **Atualiza√ß√£o de Perfil**

Seu perfil atual:
‚Ä¢ Idade: {profile_data.get('age', 'N/A')} anos
‚Ä¢ Altura: {profile_data.get('height_cm', 'N/A')} cm
‚Ä¢ Peso: {profile_data.get('current_weight_kg', 'N/A')} kg
‚Ä¢ Objetivo: {profile_data.get('goal', 'N/A')}
‚Ä¢ N√≠vel: {profile_data.get('training_level', 'N/A')}

Para atualizar, digite:
‚Ä¢ "Atualizar peso" ou "Mudar peso"
‚Ä¢ "Atualizar objetivo" ou "Mudar objetivo"
‚Ä¢ etc.

Ou digite diretamente o novo valor, como "80 kg" para peso.
""",
                "current_step": "update_options"
            }
            
        except Exception as e:
            return {
                "response": f"‚ùå Erro ao processar solicita√ß√£o: {str(e)[:100]}",
                "current_step": "update_requested"
            }
    
    
    async def _process_onboarding_flow(self, user_id: str, content: str) -> Dict[str, Any]:
        """Processa fluxo de onboarding"""
        try:
            # Busca perfil atual do usu√°rio na tabela user_profile
            profile_data = await self._get_user_profile_from_table(user_id)
            
            # Determina pr√≥ximo passo
            next_step = self._get_next_onboarding_step(profile_data)
            
            if next_step == "welcome":
                return await self._handle_welcome_step(user_id, content)
            elif next_step == "age":
                return await self._handle_age_step(user_id, content, profile_data)
            elif next_step == "height":
                return await self._handle_height_step(user_id, content, profile_data)
            elif next_step == "weight":
                return await self._handle_weight_step(user_id, content, profile_data)
            elif next_step == "goal":
                return await self._handle_goal_step(user_id, content, profile_data)
            elif next_step == "training_level":
                return await self._handle_training_level_step(user_id, content, profile_data)
            elif next_step == "restrictions":
                return await self._handle_restrictions_step(user_id, content, profile_data)
            elif next_step == "completion":
                return await self._handle_completion_step(user_id, content, profile_data)
            else:
                return await self._handle_welcome_step(user_id, content)
                
        except Exception as e:
            return {
                "response": f"Erro no fluxo de onboarding: {str(e)[:100]}",
                "current_step": "error"
            }
    
    def _get_next_onboarding_step(self, profile_data: Dict[str, Any]) -> str:
        """Determina o pr√≥ximo passo do onboarding"""
        # Pula welcome, vai direto para age
        if not profile_data.get("age"):
            return "age"
        elif not profile_data.get("height_cm"):
            return "height"
        elif not profile_data.get("current_weight_kg"):
            return "weight"
        elif not profile_data.get("goal"):
            return "goal"
        elif not profile_data.get("training_level"):
            return "training_level"
        elif not profile_data.get("restrictions"):
            return "restrictions"
        else:
            return "completion"
    
    async def _extract_field_value(self, content: str, field_name: str) -> Any:
        """Extrai valor de um campo espec√≠fico da mensagem do usu√°rio"""
        try:
            if field_name == "age":
                # Extrai n√∫mero da mensagem
                import re
                numbers = re.findall(r'\d+', content)
                return int(numbers[0]) if numbers else None
            elif field_name == "height_cm":
                return self._extract_height_value(content)
            elif field_name == "current_weight_kg":
                return self._extract_weight_value(content)
            elif field_name == "goal":
                return await self._extract_goal_value(content)
            elif field_name == "training_level":
                return self._extract_training_level_value(content)
            elif field_name == "restrictions":
                return await self._extract_restrictions(content)
            else:
                return content.strip()
                
        except Exception:
            return None
    
    def _validate_field_value(self, field_name: str, value: Any) -> Dict[str, Any]:
        """Valida valor de um campo"""
        try:
            field_config = self.profile_fields.get(field_name, {})
            
            if not field_config:
                return {"valid": False, "error": f"Campo {field_name} n√£o encontrado"}
            
            # Valida√ß√£o b√°sica
            if field_config.get("required") and not value:
                return {"valid": False, "error": f"{field_name} √© obrigat√≥rio"}
            
            # Valida√ß√£o espec√≠fica
            validation_func = field_config.get("validation")
            if validation_func and not validation_func(value):
                return {"valid": False, "error": field_config.get("error_msg", f"Valor inv√°lido para {field_name}")}
            
            return {"valid": True, "error": None}
            
        except Exception as e:
            return {"valid": False, "error": f"Erro na valida√ß√£o: {str(e)}"}
    
    async def _detect_update_intent(self, content: str) -> Optional[str]:
        """Detecta inten√ß√£o de atualiza√ß√£o de campo espec√≠fico"""
        try:
            content_lower = content.lower()
            
            # Mapeamento de palavras-chave para campos
            field_mappings = {
                "idade": "age",
                "age": "age",
                "altura": "height_cm",
                "height": "height_cm",
                "peso": "current_weight_kg",
                "weight": "current_weight_kg",
                "objetivo": "goal",
                "goal": "goal",
                "n√≠vel": "training_level",
                "level": "training_level",
                "treino": "training_level",
                "restri√ß√µes": "restrictions",
                "restrictions": "restrictions"
            }
            
            # Palavras que indicam atualiza√ß√£o
            update_keywords = ["atualizar", "mudar", "alterar", "update", "change", "modify"]
            
            # Verifica se h√° inten√ß√£o de atualiza√ß√£o
            has_update_intent = any(keyword in content_lower for keyword in update_keywords)
            
            if has_update_intent:
                # Procura por campo espec√≠fico
                for keyword, field in field_mappings.items():
                    if keyword in content_lower:
                        return field
            
            # Se n√£o h√° palavras de atualiza√ß√£o, mas h√° um valor espec√≠fico, tenta detectar
            if not has_update_intent:
                # Detecta por padr√µes de valor (apenas com unidades expl√≠citas)
                import re
                
                # Peso (ex: "80 kg", "80kg") - com unidade
                if re.search(r'\d+(?:\.\d+)?\s*kg', content_lower):
                    return "current_weight_kg"
                
                # Altura (ex: "175 cm", "175cm") - com unidade
                if re.search(r'\d+(?:\.\d+)?\s*cm', content_lower):
                    return "height_cm"
                
                # Idade (ex: "30 anos") - apenas com palavra "anos"
                if re.search(r'\d+\s*anos?', content_lower):
                    return "age"
            
            return None
            
        except Exception:
            return None
    
    # =====================================================
    # M√âTODOS DE ONBOARDING ESPEC√çFICOS
    # =====================================================
    
    async def _handle_welcome_step(self, user_id: str, content: str) -> Dict[str, Any]:
        """Lida com o passo de boas-vindas"""
        return {
            "response": """
üéâ **Bem-vindo ao BodyFlow.ai!**

Que bom te ter aqui! 

Para criar planos perfeitos e personalizados para voc√™, vou coletar algumas informa√ß√µes importantes sobre seus objetivos, caracter√≠sticas f√≠sicas e prefer√™ncias.

Isso me permitir√° oferecer:
‚Ä¢ Treinos sob medida para seu n√≠vel
‚Ä¢ Dietas ajustadas aos seus objetivos  
‚Ä¢ Receitas que combinam com seu estilo de vida
‚Ä¢ Acompanhamento personalizado da sua evolu√ß√£o

Vamos come√ßar:

**Qual sua idade?**
""",
            "current_step": "age",
            "profile_updated": False
        }
    
    
    async def _handle_age_step(self, user_id: str, content: str, profile_data: Dict[str, Any]) -> Dict[str, Any]:
        """Lida com coleta da idade"""
        try:
            import re
            numbers = re.findall(r'\d+', content)
            if not numbers:
                return {
                    "response": """
üéâ **Bem-vindo ao BodyFlow.ai!**

Que bom te ter aqui! 

Para criar planos perfeitos e personalizados para voc√™, vou coletar algumas informa√ß√µes importantes sobre seus objetivos, caracter√≠sticas f√≠sicas e prefer√™ncias.

Isso me permitir√° oferecer:
‚Ä¢ Treinos sob medida para seu n√≠vel
‚Ä¢ Dietas ajustadas aos seus objetivos  
‚Ä¢ Receitas que combinam com seu estilo de vida
‚Ä¢ Acompanhamento personalizado da sua evolu√ß√£o

Vamos come√ßar:

**Qual sua idade?**
""",
                    "current_step": "age",
                    "profile_updated": False
                }
            
            age = int(numbers[0])
            if not (13 <= age <= 100):
                return {
                    "response": "Idade deve estar entre 13 e 100 anos. Tente novamente:",
                    "current_step": "age",
                    "profile_updated": False
                }
            
            updated_profile = {**profile_data, "age": age}
            success = await self._update_user_profile(user_id, updated_profile)
            
            if success:
                return {
                    "response": f"‚úÖ Idade salva: **{age} anos**\n\n**Qual sua altura?**",
                    "current_step": "height",
                    "profile_updated": True,
                    "profile_data": updated_profile
                }
            else:
                return {
                    "response": "Erro ao salvar idade. Tente novamente:",
                    "current_step": "age",
                    "profile_updated": False
                }
                
        except Exception:
            return {
                "response": "Por favor, digite sua idade:",
                "current_step": "age",
                "profile_updated": False
            }
    
    async def _handle_height_step(self, user_id: str, content: str, profile_data: Dict[str, Any]) -> Dict[str, Any]:
        """Lida com coleta da altura"""
        try:
            height_cm = self._extract_height_value(content)
            
            if height_cm is None:
                return {
                    "response": "Por favor, digite sua altura:",
                    "current_step": "height",
                    "profile_updated": False
                }
            
            if not (100 <= height_cm <= 250):
                return {
                    "response": "Altura deve estar entre 100 e 250 cm. Tente novamente:",
                    "current_step": "height",
                    "profile_updated": False
                }
            
            updated_profile = {**profile_data, "height_cm": height_cm}
            success = await self._update_user_profile(user_id, updated_profile)
            
            if success:
                return {
                    "response": f"‚úÖ Altura salva: **{height_cm} cm**\n\n**Qual seu peso?**",
                    "current_step": "weight",
                    "profile_updated": True,
                    "profile_data": updated_profile
                }
            else:
                return {
                    "response": "Erro ao salvar altura. Tente novamente:",
                    "current_step": "height",
                    "profile_updated": False
                }
                
        except Exception:
            return {
                "response": "Por favor, digite sua altura:",
                "current_step": "height",
                "profile_updated": False
            }
    
    async def _handle_weight_step(self, user_id: str, content: str, profile_data: Dict[str, Any]) -> Dict[str, Any]:
        """Lida com coleta do peso"""
        try:
            weight_kg = self._extract_weight_value(content)
            
            if weight_kg is None:
                return {
                    "response": "Por favor, digite seu peso:",
                    "current_step": "weight",
                    "profile_updated": False
                }
            
            if not (30 <= weight_kg <= 300):
                return {
                    "response": "Peso deve estar entre 30 e 300 kg. Tente novamente:",
                    "current_step": "weight",
                    "profile_updated": False
                }
            
            updated_profile = {**profile_data, "current_weight_kg": weight_kg}
            success = await self._update_user_profile(user_id, updated_profile)
            
            if success:
                return {
                    "response": f"‚úÖ Peso salvo: **{weight_kg} kg**\n\n**Qual seu objetivo principal?**\n\n‚Ä¢ Emagrecimento\n‚Ä¢ Hipertrofia\n‚Ä¢ Condicionamento\n‚Ä¢ Manuten√ß√£o",
                    "current_step": "goal",
                    "profile_updated": True,
                    "profile_data": updated_profile
                }
            else:
                return {
                    "response": "Erro ao salvar peso. Tente novamente:",
                    "current_step": "weight",
                    "profile_updated": False
                }
                
        except Exception:
            return {
                "response": "Por favor, digite seu peso:",
                "current_step": "weight",
                "profile_updated": False
            }
    
    async def _handle_goal_step(self, user_id: str, content: str, profile_data: Dict[str, Any]) -> Dict[str, Any]:
        """Lida com coleta do objetivo"""
        goal = await self._extract_goal_value(content)
        
        if not goal or goal not in ["emagrecimento", "hipertrofia", "condicionamento", "manutencao"]:
            return {
                "response": "Por favor, escolha um objetivo v√°lido:\n\n‚Ä¢ Emagrecimento\n‚Ä¢ Hipertrofia\n‚Ä¢ Condicionamento\n‚Ä¢ Manuten√ß√£o",
                "current_step": "goal",
                "profile_updated": False
            }
        
        updated_profile = {**profile_data, "goal": goal}
        success = await self._update_user_profile(user_id, updated_profile)
        
        if success:
            return {
                "response": f"‚úÖ Objetivo salvo: **{goal}**\n\n**Qual seu n√≠vel de treino?**\n\n‚Ä¢ Iniciante\n‚Ä¢ Intermedi√°rio\n‚Ä¢ Avan√ßado",
                "current_step": "training_level",
                "profile_updated": True,
                "profile_data": updated_profile
            }
        else:
            return {
                "response": "Erro ao salvar objetivo. Tente novamente:",
                "current_step": "goal",
                "profile_updated": False
            }
    
    async def _handle_training_level_step(self, user_id: str, content: str, profile_data: Dict[str, Any]) -> Dict[str, Any]:
        """Lida com coleta do n√≠vel de treino"""
        training_level = self._extract_training_level_value(content)
        
        if not training_level or training_level not in ["iniciante", "intermediario", "avancado"]:
            return {
                "response": "Por favor, escolha um n√≠vel v√°lido:\n\n‚Ä¢ Iniciante\n‚Ä¢ Intermedi√°rio\n‚Ä¢ Avan√ßado",
                "current_step": "training_level",
                "profile_updated": False
            }
        
        updated_profile = {**profile_data, "training_level": training_level}
        success = await self._update_user_profile(user_id, updated_profile)
        
        if success:
            return {
                "response": f"‚úÖ N√≠vel salvo: **{training_level}**\n\n**Tem alguma restri√ß√£o alimentar ou de sa√∫de?**",
                "current_step": "restrictions",
                "profile_updated": True,
                "profile_data": updated_profile
            }
        else:
            return {
                "response": "Erro ao salvar n√≠vel. Tente novamente:",
                "current_step": "training_level",
                "profile_updated": False
            }
    
    async def _handle_restrictions_step(self, user_id: str, content: str, profile_data: Dict[str, Any]) -> Dict[str, Any]:
        """Lida com coleta de restri√ß√µes"""
        restrictions = await self._extract_restrictions(content)
        
        if restrictions == "null" or restrictions in ["nenhuma", "n√£o", "nao", "none"]:
            restrictions = {}
        
        updated_profile = {**profile_data, "restrictions": restrictions}
        success = await self._update_user_profile(user_id, updated_profile)
        
        if success:
            # Marca onboarding como completo no banco de dados
            await self._complete_onboarding(user_id)
            
            return {
                "response": f"‚úÖ Restri√ß√µes salvas: **{restrictions if restrictions else 'Nenhuma'}**\n\n**Perfil completo!** üéâ\n\nü§ù **Como posso te ajudar?**\n\nPosso te auxiliar com:\n\nüèÉ‚Äç‚ôÇÔ∏è **Treino sob medida** ‚Üí Sugest√µes de exerc√≠cios, divis√£o de treinos e como melhorar performance\nü•ó **Alimenta√ß√£o ajustada** ‚Üí Card√°pios, ideias de refei√ß√µes e ajustes na dieta para seus objetivos  \nüìä **An√°lise corporal** ‚Üí Feedback sobre evolu√ß√£o, composi√ß√£o e pontos que podemos melhorar\nüçΩÔ∏è **Receitas fitness** ‚Üí Pratos r√°pidos, saud√°veis e f√°ceis de incluir na rotina\n\nüí™ **Escolha uma op√ß√£o ou me diga direto seu objetivo que eu preparo algo pra voc√™!**",
                "current_step": "completion",
                "profile_updated": True,
                "profile_data": updated_profile,
                "onboarding_completed": True
            }
        else:
            return {
                "response": "‚ùå Erro ao salvar restri√ß√µes. Tente novamente:",
                "current_step": "restrictions",
                "profile_updated": False
            }
    
    async def _handle_completion_step(self, user_id: str, content: str, profile_data: Dict[str, Any]) -> Dict[str, Any]:
        """Lida com conclus√£o do onboarding"""
        return {
            "response": """
üéâ **Perfil criado com sucesso!**

Agora voc√™ pode acessar todos os servi√ßos do BodyFlow:

üèÉ‚Äç‚ôÇÔ∏è **Treino sob medida** ‚Üí Sugest√µes de exerc√≠cios, divis√£o de treinos e como melhorar performance
ü•ó **Alimenta√ß√£o ajustada** ‚Üí Card√°pios, ideias de refei√ß√µes e ajustes na dieta para seus objetivos
üìä **An√°lise corporal** ‚Üí Feedback sobre evolu√ß√£o, composi√ß√£o e pontos que podemos melhorar
üçΩÔ∏è **Receitas fitness** ‚Üí Pratos r√°pidos, saud√°veis e f√°ceis de incluir na rotina

üí™ Escolha uma op√ß√£o ou me diga direto seu objetivo que eu preparo algo pra voc√™.
""",
            "current_step": "completed",
            "profile_updated": False,
            "onboarding_completed": True
        }
    
    async def _suggest_next_agent(self, user_id: str, context: Dict[str, Any]) -> Optional[Dict[str, Any]]:
        """Sugere pr√≥ximo agente baseado no perfil"""
        try:
            long_term = context.get("long_term", {})
            goal = long_term.get("profile", {}).get("goal", "")
            
            if "perder" in goal.lower() or "emagrecer" in goal.lower():
                return {"agent": "super_personal_trainer_agent", "reason": "Objetivo de perda de peso"}
            elif "ganhar" in goal.lower() or "massa" in goal.lower():
                return {"agent": "super_personal_trainer_agent", "reason": "Objetivo de ganho de massa"}
            else:
                return {"agent": "super_personal_trainer_agent", "reason": "Iniciar com orienta√ß√£o geral"}
                
        except Exception:
            return None
